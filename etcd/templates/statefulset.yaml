apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "etcd.fullname" . }}
  labels:
    app.kubernetes.io/name: {{ template "etcd.name" . }}
    helm.sh/chart: {{ template "etcd.chart" . }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ template "etcd.name" . }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  serviceName: {{ template "etcd.fullname" . }}-headless
  podManagementPolicy: {{ .Values.statefulset.podManagementPolicy }}
  replicas: {{ .Values.statefulset.replicaCount }}
  updateStrategy:
    type: {{ .Values.statefulset.updateStratey }}
    {{- if (eq "Recreate" .Values.statefulset.updateStrategy) }}
    rollingUpdate: null
    {{- else if .Values.statefulset.rollingUpdatePartition }}
    rollingUpdate:
      partition: {{ .Values.statefulset.rollingUpdatePartition }}
    {{- end }}
  template:
    metadata:
      name: "{{ template "etcd.fullname" . }}"
      labels:
        app.kubernetes.io/name: {{ template "etcd.name" . }}
        helm.sh/chart: {{ template "etcd.chart" . }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
{{- if or .Values.podAnnotations .Values.metrics.enabled }}
      annotations:
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
{{- if .Values.metrics.podAnnotations }}
{{ toYaml .Values.metrics.podAnnotations | indent 8 }}
{{- end }}
{{- end }}
    spec:
{{- include "etcd.imagePullSecrets" . | indent 6 }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        fsGroup: {{ .Values.securityContext.fsGroup }}
        runAsUser: {{ .Values.securityContext.runAsUser }}
      {{- end }}
      affinity:
        {{- with .Values.nodeAffinity }}
        nodeAffinity: {{ tpl (toYaml .) $ | nindent 10 }}
        {{- end }}
        {{- with .Values.podAffinity }}
        podAffinity: {{ tpl (toYaml .) $ | nindent 10 }}
        {{- end }}
        {{- if eq .Values.podAntiAffinity "hard" }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - topologyKey: "kubernetes.io/hostname"
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: {{ template "etcd.name" . }}
                app.kubernetes.io/instance: {{ .Release.Name }}
        {{- else if eq .Values.podAntiAffinity "soft" }}
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: "kubernetes.io/hostname"
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: {{ template "etcd.name" . }}
                  app.kubernetes.io/instance: {{ .Release.Name }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations: {{ tpl (toYaml .) $ | nindent 8 }}
      {{- end }}
      {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
      initContainers:
      - name: volume-permissions
        image: "{{ template "etcd.volumePermissions.image" . }}"
        imagePullPolicy: {{ default "" .Values.volumePermissions.image.pullPolicy | quote }}
        command: ["chown", "-R", "{{ .Values.securityContext.runAsUser }}:{{ .Values.securityContext.fsGroup }}", "/bitnami/etcd"]
        securityContext:
          runAsUser: 0
        resources: {{ toYaml .Values.volumePermissions.resources | nindent 10 }}
        volumeMounts:
        - name: data
          mountPath: "/bitnami/etcd"
      {{- end }}
      containers:
      # Variables to populate static cluster
      {{- $replicaCount := int .Values.statefulset.replicaCount }}
      {{- $clientPort := int .Values.service.port }}
      {{- $peerPort := int .Values.service.peerPort }}
      {{- $etcdFullname := include "etcd.fullname" . }}
      {{- $releaseNamespace := .Release.Namespace }}
      {{- $etcdHeadlessServiceName := printf "%s-%s" $etcdFullname "headless" }}
      {{- $dnsBase := .Values.service.dnsBase }}
      {{- $etcdPeerProtocol := include "etcd.peerProtocol" . }}
      {{- $etcdClientProtocol := include "etcd.clientProtocol" . }}
      - name: etcd
        image: "{{ template "etcd.image" . }}"
        imagePullPolicy: "{{ .Values.image.pullPolicy }}"
        command:
        - /scripts/setup.sh
        lifecycle:
          preStop:
            exec:
              command:
              - /scripts/prestop-hook.sh
        {{- if .Values.resources }}
        resources: {{ toYaml .Values.resources | nindent 10 }}
        {{- end }}
        {{- if .Values.envVarsConfigMap }}
        envFrom:
        - configMapRef:
            name: {{ template "etcd.envVarsCM" . }}
        {{- end }}
        env:
        {{- if .Values.image.debug }}
        - name: BASH_DEBUG
          value: "1"
        - name: NAMI_DEBUG
          value: "1"
        - name: NAMI_LOG_LEVEL
          value: "trace8"
        {{- end }}

        ## Basic configuration
        - name: MY_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: ETCDCTL_API
          value: "3"
        - name: ETCD_NAME
          value: "$(MY_POD_NAME)"
        - name: ETCD_DATA_DIR
          value: {{ template "etcd.dataDir" . }}
        - name: ETCD_ADVERTISE_CLIENT_URLS
          value: "{{ $etcdClientProtocol }}://$(MY_POD_NAME).{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.{{ $dnsBase }}:{{ .Values.service.port }}"
        - name: ETCD_LISTEN_CLIENT_URLS
          value: "{{ $etcdClientProtocol }}://0.0.0.0:{{ .Values.service.port }}"
        - name: ETCD_INITIAL_ADVERTISE_PEER_URLS
          value: "{{ $etcdPeerProtocol }}://$(MY_POD_NAME).{{ $etcdHeadlessServiceName }}.{{ .Release.Namespace }}.{{ $dnsBase }}:{{ .Values.service.peerPort }}"
        - name: ETCD_LISTEN_PEER_URLS
          value: "{{ $etcdPeerProtocol }}://0.0.0.0:{{ .Values.service.peerPort }}"
        {{- if .Values.maxProcs }}
        - name: GOMAXPROCS
          value: {{ .Values.maxProcs }}
        {{- end }}

        ## Clustering configuration
        {{- if gt $replicaCount 1 }}
        - name: ETCD_INITIAL_CLUSTER_TOKEN
          value: "etcd-cluster-k8s"
        - name: ETCD_INITIAL_CLUSTER_STATE
          value: "new"
        - name: ETCD_INITIAL_CLUSTER
          value: {{range $i, $e := until $replicaCount }}{{ $etcdFullname }}-{{ $e }}={{ $etcdPeerProtocol }}://{{ $etcdFullname }}-{{ $e }}.{{ $etcdHeadlessServiceName }}.{{ $releaseNamespace }}.{{ $dnsBase }}:{{ $peerPort }},{{ end }}
        {{- end }}

        ## RBAC authentication
        - name: ALLOW_NONE_AUTHENTICATION
          value: "yes"
        {{- if .Values.auth.rbac.enabled }}
        - name: ETCD_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ if .Values.auth.rbac.existingSecret }}{{ .Values.auth.rbac.existingSecret }}{{ else }}{{ template "etcd.fullname" . }}{{ end }}
              key: etcd-root-password
        {{- end }}

        ## Client-to-server communication
        {{- if and .Values.auth.client.secureTransport .Values.auth.client.useAutoTLS }}
        - name: ETCD_AUTO_TLS
          value: "true"
        {{- else if .Values.auth.client.secureTransport }}
        - name: ETCD_CERT_FILE
          value: "/opt/bitnami/etcd/certs/client/cert.pem"
        - name: ETCD_KEY_FILE
          value: "/opt/bitnami/etcd/certs/client/key.pem"
        {{- if .Values.auth.client.enableAuthentication }}
        - name: ETCD_CLIENT_CERT_AUTH
          value: "true"
        - name: ETCD_TRUSTED_CA_FILE
          value: "/opt/bitnami/etcd/certs/client/ca.crt"
        {{- end }}
        {{- end }}

        ## Peer-to-peer communication
        {{- if and .Values.auth.peer.secureTransport .Values.auth.peer.useAutoTLS }}
        - name: ETCD_PEER_AUTO_TLS
          value: "true"
        {{- else if .Values.auth.peer.secureTransport }}
        - name: ETCD_PEER_CERT_FILE
          value: "/opt/bitnami/etcd/certs/peer/cert.pem"
        - name: ETCD_PEER_KEY_FILE
          value: "/opt/bitnami/etcd/certs/peer/key.pem"
        {{- if .Values.auth.peer.enableAuthentication }}
        - name: ETCD_PEER_CLIENT_CERT_AUTH
          value: "true"
        - name: ETCD_PEER_TRUSTED_CA_FILE
          value: "/opt/bitnami/etcd/certs/peer/ca.crt"
        {{- end }}
        {{- end }}

        ports:
        - name: client
          containerPort: 2379
        - name: peer
          containerPort: 2380
        {{- if .Values.livenessProbe.enabled }}
        livenessProbe:
          exec:
            command:
            - /scripts/probes.sh
          initialDelaySeconds: {{ .Values.livenessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.livenessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.livenessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.livenessProbe.successThreshold }}
          failureThreshold: {{ .Values.livenessProbe.failureThreshold }}
        {{- end }}
        {{- if .Values.readinessProbe.enabled }}
        readinessProbe:
          exec:
            command:
            - /scripts/probes.sh
          initialDelaySeconds: {{ .Values.readinessProbe.initialDelaySeconds }}
          periodSeconds: {{ .Values.readinessProbe.periodSeconds }}
          timeoutSeconds: {{ .Values.readinessProbe.timeoutSeconds }}
          successThreshold: {{ .Values.readinessProbe.successThreshold }}
          failureThreshold: {{ .Values.readinessProbe.failureThreshold }}
        {{- end }}
        volumeMounts:
        - name: scripts
          mountPath: /scripts/setup.sh
          subPath: setup.sh
        - name: scripts
          mountPath: /scripts/prestop-hook.sh
          subPath: prestop-hook.sh
        - name: scripts
          mountPath: /scripts/probes.sh
          subPath: probes.sh
        - name: data
          mountPath: /bitnami/etcd
        {{- if .Values.startFromSnapshot.enabled }}
        - name: init-snapshot-volume
          mountPath: /init-snapshot
        {{- end }}
        {{- if .Values.disasterRecovery.enabled }}
        - name: snapshot-volume
          mountPath: /snapshots
        {{- end }}
        {{- if .Values.configFileConfigMap }}
        - name: etcd-config
          mountPath: /opt/bitnami/etcd/conf/
        {{- end }}
        {{- if or .Values.auth.client.enableAuthentication (and .Values.auth.client.secureTransport (not .Values.auth.client.useAutoTLS ) ) }}
        - name: etcd-client-certs
          mountPath: /opt/bitnami/etcd/certs/client/
          readOnly: true
        {{- end }}
        {{- if or .Values.auth.peer.enableAuthentication (and .Values.auth.peer.secureTransport (not .Values.auth.peer.useAutoTLS ) ) }}
        - name: etcd-peer-certs
          mountPath: /opt/bitnami/etcd/certs/peer/
          readOnly: true
        {{- end }}
      volumes:
      - name: scripts
        configMap:
          name: {{ template "etcd.fullname" . }}-scripts
          defaultMode: 0755
      {{- if .Values.startFromSnapshot.enabled }}
      - name: init-snapshot-volume
        persistentVolumeClaim:
          claimName: {{ .Values.startFromSnapshot.existingClaim }}
      {{- end }}
      {{- if .Values.disasterRecovery.enabled }}
      - name: snapshot-volume
        persistentVolumeClaim:
          claimName: {{ template "etcd.disasterRecovery.pvc.name" . }}
      {{- end }}
      {{- if .Values.configFileConfigMap }}
      - name: etcd-config
        configMap:
          name: {{ template "etcd.configFileCM" . }}
      {{- end }}
      {{- if or .Values.auth.client.enableAuthentication (and .Values.auth.client.secureTransport (not .Values.auth.client.useAutoTLS ) ) }}
      - name: etcd-client-certs
        secret:
          secretName: {{ required "A secret containinig the client certificates is required" .Values.auth.client.existingSecret }}
          defaultMode: 256
      {{- end }}
      {{- if or .Values.auth.peer.enableAuthentication (and .Values.auth.peer.secureTransport (not .Values.auth.peer.useAutoTLS ) ) }}
      - name: etcd-peer-certs
        secret:
          secretName: {{ required "A secret containinig the peer certificates is required" .Values.auth.peer.existingSecret }}
          defaultMode: 256
      {{- end }}
      - name: data
        persistentVolumeClaim:
         claimName: data-etcd

